import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import sqlite3
import hashlib
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
API_TOKEN = "8091469144:AAFICJucLvkl0x5Zqjda08vMd9yjpUyty6Y"
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö


def init_db():
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()

    cursor.execute(
        """
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        telegram_id INTEGER UNIQUE,
        email TEXT UNIQUE,
        password TEXT,
        full_name TEXT,
        is_admin INTEGER DEFAULT 0
    )"""
    )

    cursor.execute(
        """
    CREATE TABLE IF NOT EXISTS user_groups (
        user_id INTEGER,
        group_name TEXT,
        UNIQUE(user_id, group_name),
        FOREIGN KEY(user_id) REFERENCES users(id)
    )"""
    )

    cursor.execute(
        """
    CREATE TABLE IF NOT EXISTS user_events (
        user_id INTEGER,
        event_name TEXT,
        UNIQUE(user_id, event_name),
        FOREIGN KEY(user_id) REFERENCES users(id)
    )"""
    )

    cursor.execute(
        """
    CREATE TABLE IF NOT EXISTS feedback (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        text TEXT,
        type TEXT,  
        created_at TEXT,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )"""
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
    admin_email = "admin@example.com"
    admin_password = hashlib.sha256("admin123".encode()).hexdigest()

    cursor.execute("SELECT * FROM users WHERE email = ?", (admin_email,))
    if not cursor.fetchone():
        cursor.execute(
            """
        INSERT INTO users (telegram_id, email, password, full_name, is_admin)
        VALUES (?, ?, ?, ?, ?)
        """,
            (123456789, admin_email, admin_password, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 1),
        )

    conn.commit()
    conn.close()


init_db()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    email = State()
    password = State()
    login_email = State()
    login_password = State()
    feedback_text = State()
    report_text = State()
    select_group = State()
    select_event = State()
    leave_group = State()
    leave_event = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_start_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
                KeyboardButton(text="üë• –ì—Ä—É–ø–ø—ã"),
            ],
            [
                KeyboardButton(text="üé≠ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"),
                KeyboardButton(text="üì® –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"),
                KeyboardButton(text="‚ö†Ô∏è –ù–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É"),
            ],
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª...",
    )


def get_profile_menu(is_admin: bool = False) -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏")],
    ]
    if is_admin:
        buttons.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    buttons.append([KeyboardButton(text="üö™ –í—ã–π—Ç–∏")])
    buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])

    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
    )


def get_groups_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìö –í—Å–µ –≥—Ä—É–ø–ø—ã")],
            [KeyboardButton(text="‚ûï –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É")],
            [KeyboardButton(text="‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≥—Ä—É–ø–ø—ã")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
    )


def get_events_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")],
            [KeyboardButton(text="üéü –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")],
            [KeyboardButton(text="‚úñÔ∏è –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
    )


def get_admin_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="üì® –û—Ç–∑—ã–≤—ã –∏ –∂–∞–ª–æ–±—ã")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
    )


def get_groups_keyboard() -> ReplyKeyboardMarkup:
    groups = [
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python",
        "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
        "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π intermediate",
    ]
    keyboard = [[KeyboardButton(text=group)] for group in groups]
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_events_keyboard() -> ReplyKeyboardMarkup:
    events = [
        "–í—Å—Ç—Ä–µ—á–∞ IT-—Å–æ–æ–±—â–µ—Å—Ç–≤–∞",
        "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
        "–Ø–∑—ã–∫–æ–≤–æ–π –∫–ª—É–±: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
    ]
    keyboard = [[KeyboardButton(text=event)] for event in events]
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_user_groups_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT group_name FROM user_groups WHERE user_id = ?", (user_id,))
    groups = [row[0] for row in cursor.fetchall()]
    conn.close()

    keyboard = [[KeyboardButton(text=group)] for group in groups]
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_user_events_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT event_name FROM user_events WHERE user_id = ?", (user_id,))
    events = [row[0] for row in cursor.fetchall()]
    conn.close()

    keyboard = [[KeyboardButton(text=event)] for event in events]
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
async def is_admin(telegram_id: int) -> bool:
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT is_admin FROM users WHERE telegram_id = ?", (telegram_id,))
    user = cursor.fetchone()
    conn.close()
    return user and user[0] == 1


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (message.from_user.id,))
    user = cursor.fetchone()
    conn.close()

    if user:
        welcome_text = (
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{message.from_user.full_name}</b>! üëã\n\n"
            "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        )
        await message.answer(welcome_text, reply_markup=get_start_menu())
    else:
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}</b>! üëã\n\n"
            "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏.\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ /login –¥–ª—è –≤—Ö–æ–¥–∞."
        )
        await message.answer(welcome_text, reply_markup=ReplyKeyboardRemove())


@dp.message(Command("register"))
async def command_register_handler(message: Message, state: FSMContext):
    await state.set_state(Form.email)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=ReplyKeyboardRemove()
    )


@dp.message(Command("login"))
async def command_login_handler(message: Message, state: FSMContext):
    await state.set_state(Form.login_email)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –≤—Ö–æ–¥–∞:", reply_markup=ReplyKeyboardRemove()
    )


@dp.message(Command("logout"))
async def command_logout_handler(message: Message):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE users SET telegram_id = NULL WHERE telegram_id = ?",
        (message.from_user.id,),
    )
    conn.commit()
    conn.close()
    await message.answer(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login",
        reply_markup=ReplyKeyboardRemove(),
    )


@dp.message(F.text == "‚ö†Ô∏è –ù–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É")
async def write_report_handler(message: Message, state: FSMContext):
    await state.set_state(Form.report_text)
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∂–∞–ª–æ–±—É:", reply_markup=ReplyKeyboardRemove()
    )


@dp.message(Form.report_text)
async def process_report(message: Message, state: FSMContext):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()

    cursor.execute(
        "SELECT id FROM users WHERE telegram_id = ?", (message.from_user.id,)
    )
    user_id = cursor.fetchone()[0]

    cursor.execute(
        """
    INSERT INTO feedback (user_id, text, type, created_at)
    VALUES (?, ?, ?, ?)
    """,
        (user_id, message.text, "report", datetime.now().isoformat()),
    )

    conn.commit()
    conn.close()

    await message.answer(
        "–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!",
        reply_markup=get_start_menu(),
    )
    await state.clear()


@dp.message(F.text == "üì® –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def write_feedback_handler(message: Message, state: FSMContext):
    await state.set_state(Form.feedback_text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:", reply_markup=ReplyKeyboardRemove())


@dp.message(Form.feedback_text)
async def process_feedback(message: Message, state: FSMContext):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()

    cursor.execute(
        "SELECT id FROM users WHERE telegram_id = ?", (message.from_user.id,)
    )
    user_id = cursor.fetchone()[0]

    cursor.execute(
        """
    INSERT INTO feedback (user_id, text, type, created_at)
    VALUES (?, ?, ?, ?)
    """,
        (user_id, message.text, "feedback", datetime.now().isoformat()),
    )

    conn.commit()
    conn.close()

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.", reply_markup=get_start_menu()
    )
    await state.clear()


@dp.message(Command("admin"))
async def command_admin_handler(message: Message):
    if await is_admin(message.from_user.id):
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message(Form.email)
async def process_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    await state.set_state(Form.password)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")


@dp.message(Form.password)
async def process_password(message: Message, state: FSMContext):
    data = await state.get_data()
    email = data["email"]
    password = hashlib.sha256(message.text.encode()).hexdigest()

    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()

    try:
        cursor.execute(
            """
        INSERT INTO users (telegram_id, email, password, full_name)
        VALUES (?, ?, ?, ?)
        """,
            (message.from_user.id, email, password, message.from_user.full_name),
        )
        conn.commit()
        await message.answer(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_start_menu()
        )
    except sqlite3.IntegrityError:
        await message.answer("–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")

    conn.close()
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤—Ö–æ–¥–∞
@dp.message(Form.login_email)
async def process_login_email(message: Message, state: FSMContext):
    await state.update_data(login_email=message.text)
    await state.set_state(Form.login_password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")


@dp.message(Form.login_password)
async def process_login_password(message: Message, state: FSMContext):
    data = await state.get_data()
    email = data["login_email"]
    password = hashlib.sha256(message.text.encode()).hexdigest()

    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute(
        "SELECT * FROM users WHERE email = ? AND password = ?", (email, password)
    )
    user = cursor.fetchone()

    if user:
        cursor.execute(
            "UPDATE users SET telegram_id = ? WHERE email = ?",
            (message.from_user.id, email),
        )
        conn.commit()
        await message.answer("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!", reply_markup=get_start_menu())
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    conn.close()
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message):
    if await is_admin(message.from_user.id):
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_start_menu())
    else:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_start_menu())


@dp.message(F.text == "üö™ –í—ã–π—Ç–∏")
async def logout_handler(message: Message):
    await command_logout_handler(message)


@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_menu(message: Message):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (message.from_user.id,))
    user = cursor.fetchone()
    conn.close()

    if not user:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /register"
        )
        return

    is_admin_user = await is_admin(message.from_user.id)
    menu_text = (
        "<b>–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è:</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "- –£–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏\n"
        "- –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"
    )
    await message.answer(menu_text, reply_markup=get_profile_menu(is_admin_user))


@dp.message(F.text == "üë• –ì—Ä—É–ø–ø—ã")
async def groups_menu(message: Message):
    menu_text = (
        "<b>–ú–µ–Ω—é –≥—Ä—É–ø–ø:</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        "- –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø\n"
        "- –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –≥—Ä—É–ø–ø—É\n"
        "- –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Ç–µ–∫—É—â–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏"
    )
    await message.answer(menu_text, reply_markup=get_groups_menu())


@dp.message(F.text == "üé≠ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def events_menu(message: Message):
    menu_text = (
        "<b>–ú–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –£–∑–Ω–∞—Ç—å –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö\n"
        "- –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è\n"
        "- –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏"
    )
    await message.answer(menu_text, reply_markup=get_events_menu())


@dp.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel_button(message: Message):
    await command_admin_handler(message)


# –ü–æ–¥–º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
@dp.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def my_stats(message: Message):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()

    cursor.execute(
        "SELECT id FROM users WHERE telegram_id = ?", (message.from_user.id,)
    )
    user = cursor.fetchone()

    if not user:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /register"
        )
        return

    user_id = user[0]

    cursor.execute("SELECT COUNT(*) FROM user_groups WHERE user_id = ?", (user_id,))
    groups_count = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM user_events WHERE user_id = ?", (user_id,))
    events_count = cursor.fetchone()[0]

    conn.close()

    stats_text = (
        "<b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üìå <b>–ì—Ä—É–ø–ø—ã:</b> {groups_count}\n"
        f"üìå <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b> {events_count}\n"
        f"üìå <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {'–≤—ã—Å–æ–∫–∞—è' if groups_count + events_count > 3 else '—Å—Ä–µ–¥–Ω—è—è' if groups_count + events_count > 0 else '–Ω–∏–∑–∫–∞—è'}\n\n"
        f"{'–í—ã –æ—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!' if groups_count + events_count > 3 else '–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!' if groups_count + events_count == 0 else ''}"
    )
    await message.answer(stats_text)


@dp.message(F.text == "üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def my_records(message: Message):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()

    cursor.execute(
        "SELECT id FROM users WHERE telegram_id = ?", (message.from_user.id,)
    )
    user = cursor.fetchone()

    if not user:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /register"
        )
        return

    user_id = user[0]

    cursor.execute("SELECT group_name FROM user_groups WHERE user_id = ?", (user_id,))
    groups = cursor.fetchall()

    cursor.execute("SELECT event_name FROM user_events WHERE user_id = ?", (user_id,))
    events = cursor.fetchall()

    conn.close()

    groups_text = (
        "\n".join([f"- {group[0]}" for group in groups]) if groups else "- –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"
    )
    events_text = (
        "\n".join([f"- {event[0]}" for event in events]) if events else "- –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"
    )

    records_text = (
        "<b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏:</b>\n\n"
        f"üë• <b>–ì—Ä—É–ø–ø—ã:</b>\n{groups_text}\n\n"
        f"üé≠ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b>\n{events_text}"
    )
    await message.answer(records_text)


# –ü–æ–¥–º–µ–Ω—é –≥—Ä—É–ø–ø
@dp.message(F.text == "üìö –í—Å–µ –≥—Ä—É–ø–ø—ã")
async def all_groups(message: Message):
    groups_text = (
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:</b>\n\n"
        "1. <b>–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python</b>\n"
        "   üïí –í—Ç/–ß—Ç 19:00-21:00\n"
        "   üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\n\n"
        "2. <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö</b>\n"
        "   üïí –ü–Ω/–°—Ä 18:00-20:00\n"
        "   üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: –ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞\n\n"
        "3. <b>–ê–Ω–≥–ª–∏–π—Å–∫–∏–π intermediate</b>\n"
        "   üïí –ü–Ω/–°—Ä/–ü—Ç 17:00-19:00\n"
        "   üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: –î–∂–æ–Ω –°–º–∏—Ç"
    )
    await message.answer(groups_text)


@dp.message(F.text == "‚ûï –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É")
async def join_group_menu(message: Message, state: FSMContext):
    await state.set_state(Form.select_group)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=get_groups_keyboard()
    )


@dp.message(
    Form.select_group,
    F.text.in_(
        [
            "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python",
            "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
            "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π intermediate",
        ]
    ),
)
async def join_group(message: Message, state: FSMContext):
    group_name = message.text

    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()

    cursor.execute(
        "SELECT id FROM users WHERE telegram_id = ?", (message.from_user.id,)
    )
    user = cursor.fetchone()

    if not user:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /register"
        )
        return

    user_id = user[0]

    try:
        cursor.execute(
            "INSERT INTO user_groups (user_id, group_name) VALUES (?, ?)",
            (user_id, group_name),
        )
        conn.commit()
        await message.answer(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –≥—Ä—É–ø–ø—É '{group_name}'!",
            reply_markup=get_groups_menu(),
        )
    except sqlite3.IntegrityError:
        await message.answer(
            f"–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –≥—Ä—É–ø–ø—É '{group_name}'!", reply_markup=get_groups_menu()
        )

    conn.close()
    await state.clear()


@dp.message(F.text == "‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≥—Ä—É–ø–ø—ã")
async def leave_group_menu(message: Message, state: FSMContext):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()

    cursor.execute(
        "SELECT id FROM users WHERE telegram_id = ?", (message.from_user.id,)
    )
    user = cursor.fetchone()

    if not user:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /register"
        )
        return

    user_id = user[0]

    cursor.execute("SELECT group_name FROM user_groups WHERE user_id = ?", (user_id,))
    groups = cursor.fetchall()
    conn.close()

    if not groups:
        await message.answer("–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –≤ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É.")
        return

    await state.set_state(Form.leave_group)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:", reply_markup=get_user_groups_keyboard(user_id)
    )


@dp.message(Form.leave_group)
async def leave_group(message: Message, state: FSMContext):
    group_name = message.text

    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()

    cursor.execute(
        "SELECT id FROM users WHERE telegram_id = ?", (message.from_user.id,)
    )
    user = cursor.fetchone()

    if not user:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /register"
        )
        return

    user_id = user[0]

    cursor.execute(
        "DELETE FROM user_groups WHERE user_id = ? AND group_name = ?",
        (user_id, group_name),
    )
    conn.commit()

    if cursor.rowcount > 0:
        await message.answer(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≥—Ä—É–ø–ø—ã '{group_name}'!",
            reply_markup=get_groups_menu(),
        )
    else:
        await message.answer(
            f"–í—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –≥—Ä—É–ø–ø—É '{group_name}'!",
            reply_markup=get_groups_menu(),
        )

    conn.close()
    await state.clear()


# –ü–æ–¥–º–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
@dp.message(F.text == "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def upcoming_events(message: Message):
    events_text = (
        "<b>–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b>\n\n"
        "1. <b>–í—Å—Ç—Ä–µ—á–∞ IT-—Å–æ–æ–±—â–µ—Å—Ç–≤–∞</b>\n"
        "   üìÖ 15 –∏—é–Ω—è 2024\n"
        "   üïí 19:00-22:00\n"
        '   üìç –ö–æ–≤–æ—Ä–∫–∏–Ω–≥ "–¢–µ—Ö–Ω–æ–≥—Ä–∞–¥"\n\n'
        "2. <b>–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</b>\n"
        "   üìÖ 20 –∏—é–Ω—è 2024\n"
        "   üïí 18:00-21:00\n"
        '   üìç –§–æ—Ç–æ—Å—Ç—É–¥–∏—è "–û–±—ä–µ–∫—Ç–∏–≤"\n\n'
        "3. <b>–Ø–∑—ã–∫–æ–≤–æ–π –∫–ª—É–±: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π</b>\n"
        "   üìÖ 25 –∏—é–Ω—è 2024\n"
        "   üïí 17:00-19:00\n"
        '   üìç –ö–∞—Ñ–µ "–õ–æ–Ω–¥–æ–Ω"'
    )
    await message.answer(events_text)


@dp.message(F.text == "üéü –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def join_event_menu(message: Message, state: FSMContext):
    await state.set_state(Form.select_event)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=get_events_keyboard()
    )


@dp.message(
    Form.select_event,
    F.text.in_(
        [
            "–í—Å—Ç—Ä–µ—á–∞ IT-—Å–æ–æ–±—â–µ—Å—Ç–≤–∞",
            "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
            "–Ø–∑—ã–∫–æ–≤–æ–π –∫–ª—É–±: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
        ]
    ),
)
async def join_event(message: Message, state: FSMContext):
    event_name = message.text

    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()

    cursor.execute(
        "SELECT id FROM users WHERE telegram_id = ?", (message.from_user.id,)
    )
    user = cursor.fetchone()

    if not user:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /register"
        )
        return

    user_id = user[0]

    try:
        cursor.execute(
            "INSERT INTO user_events (user_id, event_name) VALUES (?, ?)",
            (user_id, event_name),
        )
        conn.commit()
        await message.answer(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event_name}'!",
            reply_markup=get_events_menu(),
        )
    except sqlite3.IntegrityError:
        await message.answer(
            f"–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event_name}'!",
            reply_markup=get_events_menu(),
        )

    conn.close()
    await state.clear()


@dp.message(F.text == "‚úñÔ∏è –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def leave_event_menu(message: Message, state: FSMContext):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()

    cursor.execute(
        "SELECT id FROM users WHERE telegram_id = ?", (message.from_user.id,)
    )
    user = cursor.fetchone()

    if not user:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /register"
        )
        return

    user_id = user[0]

    cursor.execute("SELECT event_name FROM user_events WHERE user_id = ?", (user_id,))
    events = cursor.fetchall()
    conn.close()

    if not events:
        await message.answer("–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
        return

    await state.set_state(Form.leave_event)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:",
        reply_markup=get_user_events_keyboard(user_id),
    )


@dp.message(Form.leave_event)
async def leave_event(message: Message, state: FSMContext):
    event_name = message.text

    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()

    cursor.execute(
        "SELECT id FROM users WHERE telegram_id = ?", (message.from_user.id,)
    )
    user = cursor.fetchone()

    if not user:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /register"
        )
        return

    user_id = user[0]

    cursor.execute(
        "DELETE FROM user_events WHERE user_id = ? AND event_name = ?",
        (user_id, event_name),
    )
    conn.commit()

    if cursor.rowcount > 0:
        await message.answer(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '{event_name}'!",
            reply_markup=get_events_menu(),
        )
    else:
        await message.answer(
            f"–í—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event_name}'!",
            reply_markup=get_events_menu(),
        )

    conn.close()
    await state.clear()


# –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
@dp.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def admin_users(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()

    cursor.execute("SELECT full_name, email, is_admin FROM users")
    users = cursor.fetchall()
    conn.close()

    users_text = "<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n" + "\n".join(
        [
            f"{i + 1}. {user[0]} ({user[1]}) {'üëë' if user[2] else ''}"
            for i, user in enumerate(users)
        ]
    )

    await message.answer(users_text)


@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_stats(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()

    cursor.execute("SELECT COUNT(*) FROM users")
    total_users = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM user_groups")
    total_groups = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM user_events")
    total_events = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM users WHERE is_admin = 1")
    total_admins = cursor.fetchone()[0]

    conn.close()

    stats_text = (
        "<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {total_admins}\n"
        f"üìö –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –≥—Ä—É–ø–ø—ã: {total_groups}\n"
        f"üé≠ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {total_events}"
    )

    await message.answer(stats_text)


@dp.message(F.text == "üì® –û—Ç–∑—ã–≤—ã –∏ –∂–∞–ª–æ–±—ã")
async def admin_feedback(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()

    cursor.execute(
        """
    SELECT f.id, u.full_name, f.text, f.type, f.created_at 
    FROM feedback f
    JOIN users u ON f.user_id = u.id
    ORDER BY f.created_at DESC
    """
    )
    feedbacks = cursor.fetchall()
    conn.close()

    if not feedbacks:
        await message.answer("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –∏ –∂–∞–ª–æ–±.")
        return

    feedback_text = "<b>–û—Ç–∑—ã–≤—ã –∏ –∂–∞–ª–æ–±—ã:</b>\n\n"
    for fb in feedbacks:
        feedback_text += (
            f"üìå <b>{'‚ö†Ô∏è –ñ–∞–ª–æ–±–∞' if fb[3] == 'report' else 'üì® –û—Ç–∑—ã–≤'} –æ—Ç {fb[1]}</b>\n"
            f"üïí {fb[4]}\n"
            f"{fb[2]}\n\n"
        )

    await message.answer(feedback_text)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main() -> None:
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
